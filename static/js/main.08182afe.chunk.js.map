{"version":3,"sources":["DateSelecter.js","Ghibli.js","App.js","serviceWorker.js","index.js"],"names":["DateSelecter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","selectedID","_this2","request","get","query","fields","end","err","res","console","log","loadedJson","body","json","setState","_this3","options","map","v","title","id","date","release_date","react_default","a","createElement","value","key","unshift","onChange","e","handleChange","preventDefault","onSubmit","target","_this4","selecter","createSelecter","className","handleSubmit","type","Component","Ghibli","getFilmData","ID","url","concat","DateSelecter_DateSelecter","Ghibli_Viewer","Viewer","desc","description","director","App","Ghibli_Ghibli","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08182afe.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport request from 'superagent'\n\nexport default class DateSelecter extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: null,\n      selectedID: ''\n    }\n  }\n\n  componentDidMount () {\n    const url = 'https://ghibliapi.herokuapp.com/films'\n    const params = {\n      fields: 'release_date,id,title'\n    }\n    request\n      .get(url)\n      .query(params)\n      .end((err, res) => {\n        if (err) return console.log(err)\n        this.loadedJson(res.body)\n      })\n  }\n\n  loadedJson (json) {\n    if (!json) return console.log('No json data')\n    this.setState({ data: json })\n  }\n\n  createSelecter () {\n    let options = this.state.data.map((v) => {\n      const title = v.title\n      const id = v.id\n      const date = v.release_date\n      return (\n        <option value={id} key={id}>{title}: {date}</option>\n      )\n    })\n    options.unshift((<option value={''} key={null}>TITLE: DATE</option>))\n    return (\n      <select onChange={e => this.handleChange(e)}>{options}</select>\n    )\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n    const id = this.state.selectedID\n    if (!id) return console.log('Not Selected')\n    if (this.props.onSubmit) {\n      this.props.onSubmit({\n        target: this,\n        value: id\n      })\n    }\n  }\n\n  handleChange (e) {\n    this.setState({ selectedID: e.target.value })\n  }\n\n  render () {\n    if (!this.state.data) return null\n    const selecter = this.createSelecter()\n    return (\n      <div className='selecter'>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          { selecter }\n          <input type='submit' value='選択' />\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport DateSelecter from './DateSelecter'\nimport request from 'superagent'\n\nexport default class Ghibli extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: null\n    }\n  }\n\n  handleSubmit (e) {\n    this.getFilmData(e.value)\n  }\n\n  getFilmData (ID) {\n    const url = `https://ghibliapi.herokuapp.com/films/${ID}`\n    request\n      .get(url)\n      .end((err, res) => {\n        if (err) console.log(err)\n        this.loadedJson(res.body)\n      })\n  }\n\n  loadedJson (json) {\n    if (!json) console.log('No json data')\n    this.setState({ data: json })\n  }\n\n  render () {\n    return (\n      <div className='main'>\n        <DateSelecter onSubmit={e => this.handleSubmit(e)} />\n        <Viewer data={this.state.data} />\n      </div>\n    )\n  }\n}\n\nconst Viewer = props => {\n  if (!props.data) return null\n  const data = props.data\n  const title = data.title\n  const desc = data.description\n  const director = data.director\n  return (\n    <div className='film'>\n      <h2>{title}</h2>\n      <p>{desc}</p>\n      <small>{director}</small>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Ghibli from './Ghibli'\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Ghibli />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}